{"version":3,"sources":["components/search-field/SearchField.module.css","components/preloader/Preloader.module.css","components/hightlight-text/HightlightText.module.css","components/users-page/UsersPage.module.css","components/modal-window/ModalWindow.module.css","api/usersPageApi.ts","redux/users-page/actionsUsersPage.ts","components/users-page/UsersPage.tsx","components/hightlight-text/HightlightText.tsx","components/modal-window/ModalWindow.tsx","components/users-page/UsersPageContainer.tsx","redux/modal/actionsModal.ts","assets/img/preloader.gif","components/preloader/Preloader.tsx","components/search-field/SearchField.tsx","App.tsx","redux/users-page/thunksUsersPage.ts","redux/app/appReducerActions.ts","reportWebVitals.ts","redux/users-page/usersPageReducer.ts","redux/modal/modalWindowReducer.ts","redux/app/appReducer.ts","redux/store.ts","index.tsx"],"names":["module","exports","instance","axios","create","baseURL","usersAPI","get","searchUsersAC","value","type","UsersPage","users","backlight","activateModal","className","styles","usersList","map","u","onClick","city","address","suite","street","nameCompany","company","name","textBold","username","email","id","HightlightText","filter","str","regexp","RegExp","matchValue","match","split","s","index","array","length","c","shift","style","heightLights","ModalWindow","props","activeModal","modal","modalActive","setActiveModal","modalContent","modalActiveContent","event","stopPropagation","closeButton","children","UsersPageContainer","filteredUsers","data","useSelector","state","dataModalWindow","dispatch","useDispatch","useState","setDataModalAC","modalStyle","Preloader","preloaderContainer","img","src","preloader","SearchField","onChangeFilter","reset","inputContainer","input","onChange","placeholder","button","App","loading","el","useEffect","a","response","e","console","log","currentTarget","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","InitialState","rootReducer","combineReducers","action","search","item","toLowerCase","includes","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6a2e1f35.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputContainer\":\"SearchField_inputContainer__3zFxz\",\"input\":\"SearchField_input__2cBBl\",\"button\":\"SearchField_button__20A-d\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"preloaderContainer\":\"Preloader_preloaderContainer__3sUcm\",\"img\":\"Preloader_img__1dWEu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"heightLights\":\"HightlightText_heightLights__7aRP_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"usersList\":\"UsersPage_usersList__koAGV\",\"users\":\"UsersPage_users__1Mm6I\",\"modalStyle\":\"UsersPage_modalStyle__IuKEA\",\"textBold\":\"UsersPage_textBold__1JbZN\",\"input\":\"UsersPage_input__1ayE2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"modal\":\"ModalWindow_modal__1BiLn\",\"modalActive\":\"ModalWindow_modalActive__37Wpi\",\"modalContent\":\"ModalWindow_modalContent__1yy4I\",\"modalActiveContent\":\"ModalWindow_modalActiveContent__1db60\",\"closeButton\":\"ModalWindow_closeButton__2Go7r\"};","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://jsonplaceholder.typicode.com/',\r\n\r\n})\r\n\r\nexport const usersAPI = {\r\n    getUsers() {\r\n        const promise = instance.get('users');\r\n        return promise;\r\n    }\r\n}\r\n","import {UsersType} from \"./usersPageReducer\";\r\n\r\n//actions\r\nexport const setUsersAC = (users: Array<UsersType> | undefined) => ({type: 'UsersPage/SET-USERS', users} as const)\r\n\r\nexport const searchUsersAC = (value: string) => ({type: 'UserPage/SEARCH', value} as const)\r\n\r\n\r\n//actions types\r\nexport type ActionsUsersPageType = setUsersActionType | SearchActionType\r\n\r\ntype setUsersActionType = ReturnType<typeof setUsersAC>\r\n\r\ntype SearchActionType = ReturnType<typeof searchUsersAC>\r\n\r\n","import React, {ReactNode} from \"react\";\r\nimport {UsersType} from \"../../redux/users-page/usersPageReducer\";\r\nimport styles from \"./UsersPage.module.css\"\r\nimport {modalDataType} from \"../../redux/modal/modalWindowReducer\";\r\n\r\n\r\nexport const UsersPage: React.FC<UsersPagePropsType> = ({users, backlight, activateModal}) => {\r\n\r\n    return (\r\n        <div className={styles.usersList}>\r\n\r\n            {users?.map(u => {\r\n                return <div onClick={() => activateModal({\r\n                    city: u.address.city,\r\n                    suite: u.address.suite,\r\n                    street: u.address.street,\r\n                    nameCompany: u.company.name\r\n                })} className={styles.users} key={u.id}>\r\n                    <div><span className={styles.textBold}>name: </span> {backlight(u.name)}</div>\r\n                    <div><span className={styles.textBold}>username: </span> {backlight(u.username)}</div>\r\n                    <div><span className={styles.textBold}>email: </span> {backlight(u.email)}</div>\r\n                </div>\r\n            })}\r\n        </div>\r\n    )\r\n}\r\n\r\n//types\r\ntype UsersPagePropsType = {\r\n    users: Array<UsersType> | undefined\r\n    backlight: (value: string) => ReactNode\r\n    activateModal: (value: modalDataType) => void\r\n}\r\n","import React from \"react\";\r\nimport style from \"./HightlightText.module.css\"\r\n\r\nexport const HightlightText: React.FC<HightlightTextPropsType> = ({filter, str}) => {\r\n\r\n    if (!filter) return <>{str}</>\r\n\r\n    const regexp = new RegExp(filter, 'ig')\r\n\r\n    const matchValue = str.match(regexp)\r\n\r\n    if (matchValue) {\r\n        return <>{\r\n            str.split(regexp).map((s, index, array) => {\r\n                if (index < array.length - 1) {\r\n                    const c = matchValue.shift()\r\n                    return <>{s}<span className={style.heightLights}>{c}</span></>\r\n                }\r\n                return s\r\n            })\r\n        }</>\r\n    }\r\n    return <>{str}</>\r\n}\r\n\r\n//type\r\ntype HightlightTextPropsType = {\r\n    filter: string\r\n    str: string\r\n}\r\n","import React, {Dispatch, SetStateAction} from \"react\";\r\nimport styles from \"./ModalWindow.module.css\"\r\n\r\nexport const ModalWindow: React.FC<ModalWindowPropsType> = (props) => {\r\n    return <div\r\n        className={props.activeModal ? styles.modal + ' ' + styles.modalActive : styles.modal}\r\n        onClick={() => props.setActiveModal(false)}\r\n    >\r\n        <div\r\n            className={props.activeModal ? styles.modalContent + ' ' + styles.modalActiveContent : styles.modalContent}\r\n            onClick={(event => event.stopPropagation())}\r\n        >\r\n            <button onClick={() => props.setActiveModal(false)} className={styles.closeButton}>x</button>\r\n            <div>{props.children}</div>\r\n        </div>\r\n    </div>\r\n}\r\n\r\n//types\r\ntype ModalWindowPropsType = {\r\n    children: React.ReactNode\r\n    activeModal: boolean\r\n    setActiveModal: Dispatch<SetStateAction<boolean>>\r\n}\r\n","import React, {useState} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../redux/store\";\r\nimport {UsersType} from \"../../redux/users-page/usersPageReducer\";\r\nimport {UsersPage} from \"./UsersPage\";\r\nimport {HightlightText} from \"../hightlight-text/HightlightText\";\r\nimport {ModalWindow} from \"../modal-window/ModalWindow\";\r\nimport styles from \"./UsersPage.module.css\";\r\nimport {modalDataType} from \"../../redux/modal/modalWindowReducer\";\r\nimport {setDataModalAC} from \"../../redux/modal/actionsModal\";\r\n\r\n\r\nexport const UsersPageContainer: React.FC<UsersPageContainerPropsType> = ({filter, filteredUsers}) => {\r\n\r\n    const data = useSelector<AppRootStateType, modalDataType>(state => state.dataModalWindow.data)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const [activeModal, setActiveModal] = useState<boolean>(false)\r\n\r\n    const backlight = (str: string) => {\r\n        return <HightlightText filter={filter} str={str}/>\r\n    }\r\n\r\n    const activateModal = (value: modalDataType) => {\r\n        setActiveModal(true)\r\n        dispatch(setDataModalAC(value))\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <UsersPage users={filteredUsers} backlight={backlight} activateModal={activateModal}/>\r\n            <ModalWindow activeModal={activeModal} setActiveModal={setActiveModal}>\r\n                <div>\r\n                    <div className={styles.modalStyle}>\r\n                        <span className={styles.textBold}>Adress:</span>\r\n                        <div>city: {data.city}</div>\r\n                        <div>street: {data.street}</div>\r\n                        <div>suite: {data.suite}</div>\r\n                    </div>\r\n                    <div className={styles.modalStyle}>\r\n                        <div>\r\n                            <span className={styles.textBold}>Company name: </span>\r\n                            {data.nameCompany}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </ModalWindow>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n//types\r\ntype UsersPageContainerPropsType = {\r\n    filter: string\r\n    filteredUsers: Array<UsersType> | undefined\r\n}\r\n","import {modalDataType} from \"./modalWindowReducer\";\r\n\r\n//actions\r\nexport const setDataModalAC = (data: modalDataType) => ({type: 'ModalWindow/SET-DATA', data} as const)\r\n\r\n//actions types\r\nexport type ActionsModalWindowType = setUsersActionType\r\n\r\ntype setUsersActionType = ReturnType<typeof setDataModalAC>\r\n\r\n","export default __webpack_public_path__ + \"static/media/preloader.a7aefd22.gif\";","import React from 'react'\r\nimport preloader from \"../../assets/img/preloader.gif\"\r\nimport styles from \"./Preloader.module.css\"\r\n\r\n\r\nexport const Preloader = () => (\r\n    <div className={styles.preloaderContainer}>\r\n        <img className={styles.img} src={preloader}/>\r\n    </div>\r\n)\r\n\r\n\r\n","import React, {ChangeEvent} from \"react\";\r\nimport styles from \"./SearchField.module.css\";\r\n\r\nexport const SearchField: React.FC<SearchFieldPropsType> = ({filter, onChangeFilter, reset}) => {\r\n    return <div>\r\n        <div className={styles.inputContainer}>\r\n            <input className={styles.input} value={filter} onChange={onChangeFilter} placeholder={'search...'}/>\r\n            <button className={styles.button} onClick={reset}>reset</button>\r\n        </div>\r\n    </div>\r\n}\r\n\r\n//types\r\ntype SearchFieldPropsType = {\r\n    filter: string\r\n    onChangeFilter: (e: ChangeEvent<HTMLInputElement>) => void\r\n    reset: () => void\r\n}\r\n","import React, {ChangeEvent, useEffect} from 'react';\nimport './App.css';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {fetchUsersTC} from \"./redux/users-page/thunksUsersPage\";\nimport {UsersPageContainer} from \"./components/users-page/UsersPageContainer\";\nimport {Preloader} from \"./components/preloader/Preloader\";\nimport {AppRootStateType} from \"./redux/store\";\nimport {SearchField} from \"./components/search-field/SearchField\";\nimport {UsersType} from \"./redux/users-page/usersPageReducer\";\nimport {searchUsersAC} from \"./redux/users-page/actionsUsersPage\";\n\n\nfunction App() {\n    const loading = useSelector<AppRootStateType, boolean>(el => el.loading.loading)\n\n    const filteredUsers = useSelector<AppRootStateType, Array<UsersType> | undefined>(state => state.users.filteredUsers)\n\n    const filter = useSelector<AppRootStateType, string>(state => state.users.value)\n\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        dispatch(fetchUsersTC())\n    }, [])\n\n    const onChangeFilter = (e: ChangeEvent<HTMLInputElement>) => {\n        dispatch(searchUsersAC(e.currentTarget.value))\n    }\n\n    const reset = () => {\n        dispatch(searchUsersAC(''))\n    }\n\n    if (loading) {\n        return <Preloader/>\n    }\n\n    return (\n        <div className=\"App\">\n            <SearchField filter={filter} onChangeFilter={onChangeFilter} reset={reset}/>\n            <UsersPageContainer filter={filter} filteredUsers={filteredUsers}/>\n        </div>\n    );\n}\n\nexport default App;\n","import {Dispatch} from \"redux\";\r\nimport {usersAPI} from \"../../api/usersPageApi\";\r\nimport {setUsersAC} from \"./actionsUsersPage\";\r\nimport {loadingDataAC} from \"../app/appReducerActions\";\r\n\r\n\r\nexport const fetchUsersTC = () => {\r\n    return async (dispatch: Dispatch) => {\r\n        const response = await usersAPI.getUsers()\r\n        try {\r\n            dispatch(setUsersAC(response.data))\r\n            dispatch(loadingDataAC(false))\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n    }\r\n}\r\n","//actions\r\nexport const loadingDataAC = (loading: boolean) => ({type: 'APP/LOADING-DATA', loading} as const)\r\n\r\n//actions types\r\nexport type ActionsAppReducerType = setUsersActionType\r\n\r\ntype setUsersActionType = ReturnType<typeof loadingDataAC>\r\n\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {ActionsUsersPageType} from \"./actionsUsersPage\";\r\n\r\n\r\nconst initialState: InitialStateType = {\r\n    usersList: [],\r\n    value: '',\r\n    filteredUsers: []\r\n}\r\n\r\n\r\nexport const usersPageReducer = (state: InitialStateType = initialState, action: ActionsUsersPageType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'UsersPage/SET-USERS':\r\n            return {\r\n                ...state,\r\n                usersList: action.users,\r\n                filteredUsers: action.users\r\n            }\r\n        case 'UserPage/SEARCH': {\r\n            const {value} = action;\r\n\r\n            const search = (item: string) => item.toLowerCase().includes(value.toLowerCase())\r\n\r\n            const filteredUsers = state.usersList?.filter(u => {\r\n                return search(u.name) || search(u.username) || search(u.email)\r\n            })\r\n\r\n            return {...state, value, filteredUsers};\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\n//types\r\ntype InitialStateType = {\r\n    usersList: Array<UsersType> | undefined,\r\n    value: string,\r\n    filteredUsers: Array<UsersType> | undefined\r\n}\r\n\r\nexport type UsersType = {\r\n    id: number\r\n    name: string\r\n    username: string\r\n    email: string\r\n    address: AddressType\r\n    phone: string\r\n    website: string\r\n    company: CompanyType\r\n}\r\n\r\ntype AddressType = {\r\n    street: string\r\n    suite: string\r\n    city: string\r\n    zipcode: string\r\n    geo: GeoType\r\n}\r\n\r\ntype GeoType = {\r\n    lat: string\r\n    lng: string\r\n}\r\n\r\ntype CompanyType = {\r\n    name: string\r\n    catchPhrase: string\r\n    bs: string\r\n}\r\n","import {ActionsModalWindowType} from \"./actionsModal\";\r\n\r\nconst InitialState: InitialStateType = {\r\n    data: {\r\n        street: '',\r\n        city: '',\r\n        suite: '',\r\n        nameCompany: ''\r\n    }\r\n}\r\n\r\nexport const modalWindowDataReducer = (state: InitialStateType = InitialState, action: ActionsModalWindowType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'ModalWindow/SET-DATA':\r\n            return {\r\n                ...state,\r\n                data: action.data\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\n//types\r\ntype InitialStateType = { data: modalDataType}\r\n\r\nexport type modalDataType = {\r\n    street: string\r\n    suite: string\r\n    city: string\r\n    nameCompany: string\r\n}\r\n\r\n","import {ActionsAppReducerType} from \"./appReducerActions\";\r\n\r\n\r\nconst initialState: InitialStateType = {\r\n    loading: true\r\n}\r\n\r\nexport const loadingAppReducer = (state: InitialStateType = initialState, action: ActionsAppReducerType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/LOADING-DATA':\r\n            return {\r\n                ...state,\r\n                loading: action.loading\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\n//types\r\ntype InitialStateType = {loading: boolean}\r\n\r\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport {usersPageReducer} from \"./users-page/usersPageReducer\";\r\nimport {modalWindowDataReducer} from \"./modal/modalWindowReducer\";\r\nimport {loadingAppReducer} from \"./app/appReducer\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    users: usersPageReducer,\r\n    dataModalWindow: modalWindowDataReducer,\r\n    loading: loadingAppReducer,\r\n})\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\n//types\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./redux/store\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}